// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 should generate: test/generated/v2/client.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
"use client";

import * as Types from './data-types';
import { createClientResolver } from '../../../factories-module';

/**
 */
export const ServiceWithEmptyTag = createClientResolver<Types.DefaultServiceWithEmptyTagInput, Types.DefaultServiceWithEmptyTagOutput>({
    route: '/api/v{api-version}/no-tag',
    method: 'GET',
});

/**
 */
export const GetCallWithoutParametersAndResponse = createClientResolver<Types.SimpleGetCallWithoutParametersAndResponseInput, Types.SimpleGetCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'GET',
});

/**
 */
export const PutCallWithoutParametersAndResponse = createClientResolver<Types.SimplePutCallWithoutParametersAndResponseInput, Types.SimplePutCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'PUT',
});

/**
 */
export const PostCallWithoutParametersAndResponse = createClientResolver<Types.SimplePostCallWithoutParametersAndResponseInput, Types.SimplePostCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'POST',
});

/**
 */
export const DeleteCallWithoutParametersAndResponse = createClientResolver<Types.SimpleDeleteCallWithoutParametersAndResponseInput, Types.SimpleDeleteCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'DELETE',
});

/**
 */
export const OptionsCallWithoutParametersAndResponse = createClientResolver<Types.SimpleOptionsCallWithoutParametersAndResponseInput, Types.SimpleOptionsCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'OPTIONS',
});

/**
 */
export const HeadCallWithoutParametersAndResponse = createClientResolver<Types.SimpleHeadCallWithoutParametersAndResponseInput, Types.SimpleHeadCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'HEAD',
});

/**
 */
export const PatchCallWithoutParametersAndResponse = createClientResolver<Types.SimplePatchCallWithoutParametersAndResponseInput, Types.SimplePatchCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'PATCH',
});

/**
 */
export const CallWithDescriptions = createClientResolver<Types.DescriptionsCallWithDescriptionsInput, Types.DescriptionsCallWithDescriptionsOutput>({
    route: '/api/v{api-version}/descriptions/',
    method: 'POST',
});

/**
 */
export const CallWithParameters = createClientResolver<Types.ParametersCallWithParametersInput, Types.ParametersCallWithParametersOutput>({
    route: '/api/v{api-version}/parameters/{parameterPath}',
    method: 'POST',
});

/**
 */
export const CallWithWeirdParameterNames = createClientResolver<Types.ParametersCallWithWeirdParameterNamesInput, Types.ParametersCallWithWeirdParameterNamesOutput>({
    route: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
    method: 'POST',
});

/**
 */
export const CallWithDefaultParameters = createClientResolver<Types.DefaultsCallWithDefaultParametersInput, Types.DefaultsCallWithDefaultParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'GET',
});

/**
 */
export const CallWithDefaultOptionalParameters = createClientResolver<Types.DefaultsCallWithDefaultOptionalParametersInput, Types.DefaultsCallWithDefaultOptionalParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'POST',
});

/**
 */
export const CallToTestOrderOfParams = createClientResolver<Types.DefaultsCallToTestOrderOfParamsInput, Types.DefaultsCallToTestOrderOfParamsOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'PUT',
});

/**
 */
export const DuplicateName = createClientResolver<Types.DuplicateDuplicateNameInput, Types.DuplicateDuplicateNameOutput>({
    route: '/api/v{api-version}/duplicate',
    method: 'GET',
});

/**
 */
export const DuplicateName1 = createClientResolver<Types.DuplicateDuplicateName1Input, Types.DuplicateDuplicateName1Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'POST',
});

/**
 */
export const DuplicateName2 = createClientResolver<Types.DuplicateDuplicateName2Input, Types.DuplicateDuplicateName2Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'PUT',
});

/**
 */
export const DuplicateName3 = createClientResolver<Types.DuplicateDuplicateName3Input, Types.DuplicateDuplicateName3Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'DELETE',
});

/**
 * @returns void
 */
export const CallWithNoContentResponse = createClientResolver<Types.NoContentCallWithNoContentResponseInput, Types.NoContentCallWithNoContentResponseOutput>({
    route: '/api/v{api-version}/no-content',
    method: 'GET',
});

/**
 * @returns void
 */
export const DummyAMultipleTags1 = createClientResolver<Types.MultipleTags1DummyAInput, Types.MultipleTags1DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

/**
 * @returns void
 */
export const DummyBMultipleTags1 = createClientResolver<Types.MultipleTags1DummyBInput, Types.MultipleTags1DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns void
 */
export const DummyAMultipleTags2 = createClientResolver<Types.MultipleTags2DummyAInput, Types.MultipleTags2DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

/**
 * @returns void
 */
export const DummyBMultipleTags2 = createClientResolver<Types.MultipleTags2DummyBInput, Types.MultipleTags2DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns void
 */
export const DummyBMultipleTags3 = createClientResolver<Types.MultipleTags3DummyBInput, Types.MultipleTags3DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns ModelWithString Message for default response
 */
export const CallWithResponse = createClientResolver<Types.ResponseCallWithResponseInput, Types.ResponseCallWithResponseOutput>({
    route: '/api/v{api-version}/response',
    method: 'GET',
});

/**
 * @returns ModelWithString Message for default response
 */
export const CallWithDuplicateResponses = createClientResolver<Types.ResponseCallWithDuplicateResponsesInput, Types.ResponseCallWithDuplicateResponsesOutput>({
    route: '/api/v{api-version}/response',
    method: 'POST',
});

/**
 * @returns any Message for 200 response
 * @returns ModelWithString Message for default response
 * @returns ModelThatExtends Message for 201 response
 * @returns ModelThatExtendsExtends Message for 202 response
 */
export const CallWithResponses = createClientResolver<Types.ResponseCallWithResponsesInput, Types.ResponseCallWithResponsesOutput>({
    route: '/api/v{api-version}/response',
    method: 'PUT',
});

/**
 */
export const CollectionFormat = createClientResolver<Types.CollectionFormatCollectionFormatInput, Types.CollectionFormatCollectionFormatOutput>({
    route: '/api/v{api-version}/collectionFormat',
    method: 'GET',
});

/**
 * @returns number Response is a simple number
 * @returns string Response is a simple string
 * @returns boolean Response is a simple boolean
 * @returns any Response is a simple object
 */
export const Types = createClientResolver<Types.TypesTypesInput, Types.TypesTypesOutput>({
    route: '/api/v{api-version}/types',
    method: 'GET',
});

/**
 * @returns ModelWithString Successful response
 */
export const ComplexTypes = createClientResolver<Types.ComplexComplexTypesInput, Types.ComplexComplexTypesOutput>({
    route: '/api/v{api-version}/complex',
    method: 'GET',
});

/**
 * @returns string Successful response
 */
export const CallWithResultFromHeader = createClientResolver<Types.HeaderCallWithResultFromHeaderInput, Types.HeaderCallWithResultFromHeaderOutput>({
    route: '/api/v{api-version}/header',
    method: 'POST',
});

/**
 * @returns any Custom message: Successful response
 */
export const TestErrorCode = createClientResolver<Types.ErrorTestErrorCodeInput, Types.ErrorTestErrorCodeOutput>({
    route: '/api/v{api-version}/error',
    method: 'POST',
});


"
`;

exports[`v2 should generate: test/generated/v2/data-types.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './models/ModelWithString';
import type { ModelThatExtends } from './models/ModelThatExtends';
import type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
import type { ModelWithString } from './models/ModelWithString';
import type { ModelWithString } from './models/ModelWithString';

export type DefaultServiceWithEmptyTagInput = {};

export type DefaultServiceWithEmptyTagOutput = void;

export type SimpleGetCallWithoutParametersAndResponseInput = {};

export type SimpleGetCallWithoutParametersAndResponseOutput = void;

export type SimplePutCallWithoutParametersAndResponseInput = {};

export type SimplePutCallWithoutParametersAndResponseOutput = void;

export type SimplePostCallWithoutParametersAndResponseInput = {};

export type SimplePostCallWithoutParametersAndResponseOutput = void;

export type SimpleDeleteCallWithoutParametersAndResponseInput = {};

export type SimpleDeleteCallWithoutParametersAndResponseOutput = void;

export type SimpleOptionsCallWithoutParametersAndResponseInput = {};

export type SimpleOptionsCallWithoutParametersAndResponseOutput = void;

export type SimpleHeadCallWithoutParametersAndResponseInput = {};

export type SimpleHeadCallWithoutParametersAndResponseOutput = void;

export type SimplePatchCallWithoutParametersAndResponseInput = {};

export type SimplePatchCallWithoutParametersAndResponseOutput = void;

export type DescriptionsCallWithDescriptionsInput = {
    /**
     * Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     */
    parameterWithBreaks?: string;
    /**
     * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     */
    parameterWithBackticks?: string;
    /**
     * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
     */
    parameterWithSlashes?: string;
    /**
     * Testing expression placeholders in string: \${expression} should work
     */
    parameterWithExpressionPlaceholders?: string;
    /**
     * Testing quotes in string: 'single quote''' and "double quotes""" should work
     */
    parameterWithQuotes?: string;
    /**
     * Testing reserved characters in string: * inline * and ** inline ** should work
     */
    parameterWithReservedCharacters?: string;
};

export type DescriptionsCallWithDescriptionsOutput = void;

export type ParametersCallWithParametersInput = {
    /**
     * This is the parameter that goes into the header
     */
    parameterHeader: string;
    /**
     * This is the parameter that goes into the query params
     */
    parameterQuery: string;
    /**
     * This is the parameter that goes into the form data
     */
    parameterForm: string;
    /**
     * This is the parameter that is sent as request body
     */
    parameterBody: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath: string;
};

export type ParametersCallWithParametersOutput = void;

export type ParametersCallWithWeirdParameterNamesInput = {
    /**
     * This is the parameter that goes into the request header
     */
    parameterHeader: string;
    /**
     * This is the parameter that goes into the request query params
     */
    parameterQuery: string;
    /**
     * This is the parameter that goes into the request form data
     */
    parameterForm: string;
    /**
     * This is the parameter that is sent as request body
     */
    parameterBody: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath1?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath2?: string;
    /**
     * This is the parameter that goes into the path
     */
    parameterPath3?: string;
    /**
     * This is the parameter with a reserved keyword
     */
    _default?: string;
};

export type ParametersCallWithWeirdParameterNamesOutput = void;

export type DefaultsCallWithDefaultParametersInput = {
    /**
     * This is a simple string with default value
     */
    parameterString?: string;
    /**
     * This is a simple number with default value
     */
    parameterNumber?: number;
    /**
     * This is a simple boolean with default value
     */
    parameterBoolean?: boolean;
    /**
     * This is a simple enum with default value
     */
    parameterEnum?: 'Success' | 'Warning' | 'Error';
    /**
     * This is a simple model with default value
     */
    parameterModel?: ModelWithString;
};

export type DefaultsCallWithDefaultParametersOutput = void;

export type DefaultsCallWithDefaultOptionalParametersInput = {
    /**
     * This is a simple string that is optional with default value
     */
    parameterString?: string;
    /**
     * This is a simple number that is optional with default value
     */
    parameterNumber?: number;
    /**
     * This is a simple boolean that is optional with default value
     */
    parameterBoolean?: boolean;
    /**
     * This is a simple enum that is optional with default value
     */
    parameterEnum?: 'Success' | 'Warning' | 'Error';
    /**
     * This is a simple model that is optional with default value
     */
    parameterModel?: ModelWithString;
};

export type DefaultsCallWithDefaultOptionalParametersOutput = void;

export type DefaultsCallToTestOrderOfParamsInput = {
    /**
     * This is a string with no default
     */
    parameterStringWithNoDefault: string;
    /**
     * This is a optional string with default
     */
    parameterOptionalStringWithDefault?: string;
    /**
     * This is a optional string with empty default
     */
    parameterOptionalStringWithEmptyDefault?: string;
    /**
     * This is a optional string with no default
     */
    parameterOptionalStringWithNoDefault?: string;
    /**
     * This is a string with default
     */
    parameterStringWithDefault?: string;
    /**
     * This is a string with empty default
     */
    parameterStringWithEmptyDefault?: string;
    /**
     * This is a string that can be null with no default
     */
    parameterStringNullableWithNoDefault?: string | null;
    /**
     * This is a string that can be null with default
     */
    parameterStringNullableWithDefault?: string | null;
};

export type DefaultsCallToTestOrderOfParamsOutput = void;

export type DuplicateDuplicateNameInput = {};

export type DuplicateDuplicateNameOutput = void;

export type DuplicateDuplicateName1Input = {};

export type DuplicateDuplicateName1Output = void;

export type DuplicateDuplicateName2Input = {};

export type DuplicateDuplicateName2Output = void;

export type DuplicateDuplicateName3Input = {};

export type DuplicateDuplicateName3Output = void;

export type NoContentCallWithNoContentResponseInput = {};

export type NoContentCallWithNoContentResponseOutput = void;

export type MultipleTags1DummyAInput = {};

export type MultipleTags1DummyAOutput = void;

export type MultipleTags1DummyBInput = {};

export type MultipleTags1DummyBOutput = void;

export type MultipleTags2DummyAInput = {};

export type MultipleTags2DummyAOutput = void;

export type MultipleTags2DummyBInput = {};

export type MultipleTags2DummyBOutput = void;

export type MultipleTags3DummyBInput = {};

export type MultipleTags3DummyBOutput = void;

export type ResponseCallWithResponseInput = {};

export type ResponseCallWithResponseOutput = ModelWithString;

export type ResponseCallWithDuplicateResponsesInput = {};

export type ResponseCallWithDuplicateResponsesOutput = ModelWithString;

export type ResponseCallWithResponsesInput = {};

export type ResponseCallWithResponsesOutput = {
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
    readonly value?: Array<ModelWithString>;
} | ModelWithString | ModelThatExtends | ModelThatExtendsExtends;

export type CollectionFormatCollectionFormatInput = {
    /**
     * This is an array parameter that is sent as csv format (comma-separated values)
     */
    parameterArrayCsv: Array<string>;
    /**
     * This is an array parameter that is sent as ssv format (space-separated values)
     */
    parameterArraySsv: Array<string>;
    /**
     * This is an array parameter that is sent as tsv format (tab-separated values)
     */
    parameterArrayTsv: Array<string>;
    /**
     * This is an array parameter that is sent as pipes format (pipe-separated values)
     */
    parameterArrayPipes: Array<string>;
    /**
     * This is an array parameter that is sent as multi format (multiple parameter instances)
     */
    parameterArrayMulti: Array<string>;
};

export type CollectionFormatCollectionFormatOutput = void;

export type TypesTypesInput = {
    /**
     * This is an array parameter
     */
    parameterArray: Array<string>;
    /**
     * This is a dictionary parameter
     */
    parameterDictionary: Record<string, string>;
    /**
     * This is an enum parameter
     */
    parameterEnum: 'Success' | 'Warning' | 'Error';
    /**
     * This is a number parameter
     */
    parameterNumber?: number;
    /**
     * This is a string parameter
     */
    parameterString?: string;
    /**
     * This is a boolean parameter
     */
    parameterBoolean?: boolean;
    /**
     * This is an object parameter
     */
    parameterObject?: any;
    /**
     * This is a number parameter
     */
    id?: number;
};

export type TypesTypesOutput = number | string | boolean | any;

export type ComplexComplexTypesInput = {
    /**
     * Parameter containing object
     */
    parameterObject: {
        first?: {
            second?: {
                third?: string;
            };
        };
    };
    /**
     * Parameter containing reference
     */
    parameterReference: ModelWithString;
};

export type ComplexComplexTypesOutput = Array<ModelWithString>;

export type HeaderCallWithResultFromHeaderInput = {};

export type HeaderCallWithResultFromHeaderOutput = string;

export type ErrorTestErrorCodeInput = {
    /**
     * Status code to return
     */
    status: string;
};

export type ErrorTestErrorCodeOutput = any;


"
`;

exports[`v2 should generate: test/generated/v2/hooks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import * as Types from './data-types';
import { createSwrHook } from '../../../factories-module';

export const useServiceWithEmptyTag = createSwrHook<Types.DefaultServiceWithEmptyTagInput, Types.DefaultServiceWithEmptyTagOutput>({
    route: '/api/v{api-version}/no-tag',
    method: 'GET',
});

export const useGetCallWithoutParametersAndResponse = createSwrHook<Types.SimpleGetCallWithoutParametersAndResponseInput, Types.SimpleGetCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'GET',
});

export const useCallWithDefaultParameters = createSwrHook<Types.DefaultsCallWithDefaultParametersInput, Types.DefaultsCallWithDefaultParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'GET',
});

export const useDuplicateName = createSwrHook<Types.DuplicateDuplicateNameInput, Types.DuplicateDuplicateNameOutput>({
    route: '/api/v{api-version}/duplicate',
    method: 'GET',
});

export const useCallWithNoContentResponse = createSwrHook<Types.NoContentCallWithNoContentResponseInput, Types.NoContentCallWithNoContentResponseOutput>({
    route: '/api/v{api-version}/no-content',
    method: 'GET',
});

export const useDummyA = createSwrHook<Types.MultipleTags1DummyAInput, Types.MultipleTags1DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

export const useDummyB = createSwrHook<Types.MultipleTags1DummyBInput, Types.MultipleTags1DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

export const useDummyA = createSwrHook<Types.MultipleTags2DummyAInput, Types.MultipleTags2DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

export const useDummyB = createSwrHook<Types.MultipleTags2DummyBInput, Types.MultipleTags2DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

export const useDummyB = createSwrHook<Types.MultipleTags3DummyBInput, Types.MultipleTags3DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

export const useCallWithResponse = createSwrHook<Types.ResponseCallWithResponseInput, Types.ResponseCallWithResponseOutput>({
    route: '/api/v{api-version}/response',
    method: 'GET',
});

export const useCollectionFormat = createSwrHook<Types.CollectionFormatCollectionFormatInput, Types.CollectionFormatCollectionFormatOutput>({
    route: '/api/v{api-version}/collectionFormat',
    method: 'GET',
});

export const useTypes = createSwrHook<Types.TypesTypesInput, Types.TypesTypesOutput>({
    route: '/api/v{api-version}/types',
    method: 'GET',
});

export const useComplexTypes = createSwrHook<Types.ComplexComplexTypesInput, Types.ComplexComplexTypesOutput>({
    route: '/api/v{api-version}/complex',
    method: 'GET',
});


"
`;

exports[`v2 should generate: test/generated/v2/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type { _default } from './models/_default';
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { Date } from './models/Date';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $_default } from './schemas/$_default';
export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $Date } from './schemas/$Date';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export * from './data-types';
export * from './hooks';
export * from './routes';
export * from './server';
export * from './client';

"
`;

exports[`v2 should generate: test/generated/v2/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type _default = {
    name?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;

"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;

"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;

"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;

"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;

"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;

"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;

"
`;

exports[`v2 should generate: test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}

"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}

"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\'Single Quote\\'',
    _DOUBLE_QUOTES_ = '"Double Quotes"',
}

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithProperties } from './ModelWithProperties';
/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleString = string;

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;

"
`;

exports[`v2 should generate: test/generated/v2/routes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * @throws ApiError
 */
export const ServiceWithEmptyTagRoute = '/api/v{api-version}/no-tag';

/**
 * @throws ApiError
 */
export const GetCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const PutCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const PostCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const DeleteCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const OptionsCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const HeadCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const PatchCallWithoutParametersAndResponseRoute = '/api/v{api-version}/simple';

/**
 * @throws ApiError
 */
export const CallWithDescriptionsRoute = '/api/v{api-version}/descriptions/';

/**
 * @throws ApiError
 */
export const CallWithParametersRoute = '/api/v{api-version}/parameters/{parameterPath}';

/**
 * @throws ApiError
 */
export const CallWithWeirdParameterNamesRoute = '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}';

/**
 * @throws ApiError
 */
export const CallWithDefaultParametersRoute = '/api/v{api-version}/defaults';

/**
 * @throws ApiError
 */
export const CallWithDefaultOptionalParametersRoute = '/api/v{api-version}/defaults';

/**
 * @throws ApiError
 */
export const CallToTestOrderOfParamsRoute = '/api/v{api-version}/defaults';

/**
 * @throws ApiError
 */
export const DuplicateNameRoute = '/api/v{api-version}/duplicate';

/**
 * @throws ApiError
 */
export const DuplicateName1Route = '/api/v{api-version}/duplicate';

/**
 * @throws ApiError
 */
export const DuplicateName2Route = '/api/v{api-version}/duplicate';

/**
 * @throws ApiError
 */
export const DuplicateName3Route = '/api/v{api-version}/duplicate';

/**
 * @throws ApiError
 */
export const CallWithNoContentResponseRoute = '/api/v{api-version}/no-content';

/**
 * @throws ApiError
 */
export const DummyAMultipleTags1Route = '/api/v{api-version}/multiple-tags/a';

/**
 * @throws ApiError
 */
export const DummyBMultipleTags1Route = '/api/v{api-version}/multiple-tags/b';

/**
 * @throws ApiError
 */
export const DummyAMultipleTags2Route = '/api/v{api-version}/multiple-tags/a';

/**
 * @throws ApiError
 */
export const DummyBMultipleTags2Route = '/api/v{api-version}/multiple-tags/b';

/**
 * @throws ApiError
 */
export const DummyBMultipleTags3Route = '/api/v{api-version}/multiple-tags/b';

/**
 * @throws ApiError
 */
export const CallWithResponseRoute = '/api/v{api-version}/response';

/**
 * @throws ApiError
 */
export const CallWithDuplicateResponsesRoute = '/api/v{api-version}/response';

/**
 * @throws ApiError
 */
export const CallWithResponsesRoute = '/api/v{api-version}/response';

/**
 * @throws ApiError
 */
export const CollectionFormatRoute = '/api/v{api-version}/collectionFormat';

/**
 * @throws ApiError
 */
export const TypesRoute = '/api/v{api-version}/types';

/**
 * @throws ApiError
 */
export const ComplexTypesRoute = '/api/v{api-version}/complex';

/**
 * @throws ApiError
 */
export const CallWithResultFromHeaderRoute = '/api/v{api-version}/header';

/**
 * @throws ApiError
 */
export const TestErrorCodeRoute = '/api/v{api-version}/error';


"
`;

exports[`v2 should generate: test/generated/v2/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line

    Fourth line\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $Date = {
    type: 'string',
    description: \`This is a type-only model that defines Date as a string\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $EnumWithExtensions = {
    type: 'Enum',
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $EnumWithNumbers = {
    type: 'Enum',
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $EnumWithStrings = {
    type: 'Enum',
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;

"
`;

exports[`v2 should generate: test/generated/v2/server.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import * as Types from './data-types';
import { createServerResolver } from '../../../factories-module';

/**
 */
export const serverServiceWithEmptyTag = createServerResolver<Types.DefaultServiceWithEmptyTagInput, Types.DefaultServiceWithEmptyTagOutput>({
    route: '/api/v{api-version}/no-tag',
    method: 'GET',
});

/**
 */
export const serverGetCallWithoutParametersAndResponse = createServerResolver<Types.SimpleGetCallWithoutParametersAndResponseInput, Types.SimpleGetCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'GET',
});

/**
 */
export const serverPutCallWithoutParametersAndResponse = createServerResolver<Types.SimplePutCallWithoutParametersAndResponseInput, Types.SimplePutCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'PUT',
});

/**
 */
export const serverPostCallWithoutParametersAndResponse = createServerResolver<Types.SimplePostCallWithoutParametersAndResponseInput, Types.SimplePostCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'POST',
});

/**
 */
export const serverDeleteCallWithoutParametersAndResponse = createServerResolver<Types.SimpleDeleteCallWithoutParametersAndResponseInput, Types.SimpleDeleteCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'DELETE',
});

/**
 */
export const serverOptionsCallWithoutParametersAndResponse = createServerResolver<Types.SimpleOptionsCallWithoutParametersAndResponseInput, Types.SimpleOptionsCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'OPTIONS',
});

/**
 */
export const serverHeadCallWithoutParametersAndResponse = createServerResolver<Types.SimpleHeadCallWithoutParametersAndResponseInput, Types.SimpleHeadCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'HEAD',
});

/**
 */
export const serverPatchCallWithoutParametersAndResponse = createServerResolver<Types.SimplePatchCallWithoutParametersAndResponseInput, Types.SimplePatchCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'PATCH',
});

/**
 */
export const serverCallWithDescriptions = createServerResolver<Types.DescriptionsCallWithDescriptionsInput, Types.DescriptionsCallWithDescriptionsOutput>({
    route: '/api/v{api-version}/descriptions/',
    method: 'POST',
});

/**
 */
export const serverCallWithParameters = createServerResolver<Types.ParametersCallWithParametersInput, Types.ParametersCallWithParametersOutput>({
    route: '/api/v{api-version}/parameters/{parameterPath}',
    method: 'POST',
});

/**
 */
export const serverCallWithWeirdParameterNames = createServerResolver<Types.ParametersCallWithWeirdParameterNamesInput, Types.ParametersCallWithWeirdParameterNamesOutput>({
    route: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
    method: 'POST',
});

/**
 */
export const serverCallWithDefaultParameters = createServerResolver<Types.DefaultsCallWithDefaultParametersInput, Types.DefaultsCallWithDefaultParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'GET',
});

/**
 */
export const serverCallWithDefaultOptionalParameters = createServerResolver<Types.DefaultsCallWithDefaultOptionalParametersInput, Types.DefaultsCallWithDefaultOptionalParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'POST',
});

/**
 */
export const serverCallToTestOrderOfParams = createServerResolver<Types.DefaultsCallToTestOrderOfParamsInput, Types.DefaultsCallToTestOrderOfParamsOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'PUT',
});

/**
 */
export const serverDuplicateName = createServerResolver<Types.DuplicateDuplicateNameInput, Types.DuplicateDuplicateNameOutput>({
    route: '/api/v{api-version}/duplicate',
    method: 'GET',
});

/**
 */
export const serverDuplicateName1 = createServerResolver<Types.DuplicateDuplicateName1Input, Types.DuplicateDuplicateName1Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'POST',
});

/**
 */
export const serverDuplicateName2 = createServerResolver<Types.DuplicateDuplicateName2Input, Types.DuplicateDuplicateName2Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'PUT',
});

/**
 */
export const serverDuplicateName3 = createServerResolver<Types.DuplicateDuplicateName3Input, Types.DuplicateDuplicateName3Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'DELETE',
});

/**
 * @returns void
 */
export const serverCallWithNoContentResponse = createServerResolver<Types.NoContentCallWithNoContentResponseInput, Types.NoContentCallWithNoContentResponseOutput>({
    route: '/api/v{api-version}/no-content',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyAMultipleTags1 = createServerResolver<Types.MultipleTags1DummyAInput, Types.MultipleTags1DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyBMultipleTags1 = createServerResolver<Types.MultipleTags1DummyBInput, Types.MultipleTags1DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyAMultipleTags2 = createServerResolver<Types.MultipleTags2DummyAInput, Types.MultipleTags2DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyBMultipleTags2 = createServerResolver<Types.MultipleTags2DummyBInput, Types.MultipleTags2DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyBMultipleTags3 = createServerResolver<Types.MultipleTags3DummyBInput, Types.MultipleTags3DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns ModelWithString Message for default response
 */
export const serverCallWithResponse = createServerResolver<Types.ResponseCallWithResponseInput, Types.ResponseCallWithResponseOutput>({
    route: '/api/v{api-version}/response',
    method: 'GET',
});

/**
 * @returns ModelWithString Message for default response
 */
export const serverCallWithDuplicateResponses = createServerResolver<Types.ResponseCallWithDuplicateResponsesInput, Types.ResponseCallWithDuplicateResponsesOutput>({
    route: '/api/v{api-version}/response',
    method: 'POST',
});

/**
 * @returns any Message for 200 response
 * @returns ModelWithString Message for default response
 * @returns ModelThatExtends Message for 201 response
 * @returns ModelThatExtendsExtends Message for 202 response
 */
export const serverCallWithResponses = createServerResolver<Types.ResponseCallWithResponsesInput, Types.ResponseCallWithResponsesOutput>({
    route: '/api/v{api-version}/response',
    method: 'PUT',
});

/**
 */
export const serverCollectionFormat = createServerResolver<Types.CollectionFormatCollectionFormatInput, Types.CollectionFormatCollectionFormatOutput>({
    route: '/api/v{api-version}/collectionFormat',
    method: 'GET',
});

/**
 * @returns number Response is a simple number
 * @returns string Response is a simple string
 * @returns boolean Response is a simple boolean
 * @returns any Response is a simple object
 */
export const serverTypes = createServerResolver<Types.TypesTypesInput, Types.TypesTypesOutput>({
    route: '/api/v{api-version}/types',
    method: 'GET',
});

/**
 * @returns ModelWithString Successful response
 */
export const serverComplexTypes = createServerResolver<Types.ComplexComplexTypesInput, Types.ComplexComplexTypesOutput>({
    route: '/api/v{api-version}/complex',
    method: 'GET',
});

/**
 * @returns string Successful response
 */
export const serverCallWithResultFromHeader = createServerResolver<Types.HeaderCallWithResultFromHeaderInput, Types.HeaderCallWithResultFromHeaderOutput>({
    route: '/api/v{api-version}/header',
    method: 'POST',
});

/**
 * @returns any Custom message: Successful response
 */
export const serverTestErrorCode = createServerResolver<Types.ErrorTestErrorCodeInput, Types.ErrorTestErrorCodeOutput>({
    route: '/api/v{api-version}/error',
    method: 'POST',
});


"
`;

exports[`v3 should generate: test/generated/v3/server.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import * as Types from './data-types';
import { createServerResolver } from '../../../factories-module';

/**
 */
export const serverServiceWithEmptyTag = createServerResolver<Types.DefaultServiceWithEmptyTagInput, Types.DefaultServiceWithEmptyTagOutput>({
    route: '/api/v{api-version}/no-tag',
    method: 'GET',
});

/**
 */
export const serverGetCallWithoutParametersAndResponse = createServerResolver<Types.SimpleGetCallWithoutParametersAndResponseInput, Types.SimpleGetCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'GET',
});

/**
 */
export const serverPutCallWithoutParametersAndResponse = createServerResolver<Types.SimplePutCallWithoutParametersAndResponseInput, Types.SimplePutCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'PUT',
});

/**
 */
export const serverPostCallWithoutParametersAndResponse = createServerResolver<Types.SimplePostCallWithoutParametersAndResponseInput, Types.SimplePostCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'POST',
});

/**
 */
export const serverDeleteCallWithoutParametersAndResponse = createServerResolver<Types.SimpleDeleteCallWithoutParametersAndResponseInput, Types.SimpleDeleteCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'DELETE',
});

/**
 */
export const serverOptionsCallWithoutParametersAndResponse = createServerResolver<Types.SimpleOptionsCallWithoutParametersAndResponseInput, Types.SimpleOptionsCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'OPTIONS',
});

/**
 */
export const serverHeadCallWithoutParametersAndResponse = createServerResolver<Types.SimpleHeadCallWithoutParametersAndResponseInput, Types.SimpleHeadCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'HEAD',
});

/**
 */
export const serverPatchCallWithoutParametersAndResponse = createServerResolver<Types.SimplePatchCallWithoutParametersAndResponseInput, Types.SimplePatchCallWithoutParametersAndResponseOutput>({
    route: '/api/v{api-version}/simple',
    method: 'PATCH',
});

/**
 */
export const serverCallWithDescriptions = createServerResolver<Types.DescriptionsCallWithDescriptionsInput, Types.DescriptionsCallWithDescriptionsOutput>({
    route: '/api/v{api-version}/descriptions/',
    method: 'POST',
});

/**
 * @deprecated
 */
export const serverDeprecatedCall = createServerResolver<Types.DeprecatedDeprecatedCallInput, Types.DeprecatedDeprecatedCallOutput>({
    route: '/api/v{api-version}/parameters/deprecated',
    method: 'POST',
});

/**
 */
export const serverCallWithParameters = createServerResolver<Types.ParametersCallWithParametersInput, Types.ParametersCallWithParametersOutput>({
    route: '/api/v{api-version}/parameters/{parameterPath}',
    method: 'POST',
    mediaType: 'application/json',
});

/**
 */
export const serverCallWithWeirdParameterNames = createServerResolver<Types.ParametersCallWithWeirdParameterNamesInput, Types.ParametersCallWithWeirdParameterNamesOutput>({
    route: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
    method: 'POST',
    mediaType: 'application/json',
});

/**
 */
export const serverGetCallWithOptionalParam = createServerResolver<Types.ParametersGetCallWithOptionalParamInput, Types.ParametersGetCallWithOptionalParamOutput>({
    route: '/api/v{api-version}/parameters/',
    method: 'GET',
    mediaType: 'application/json',
});

/**
 */
export const serverPostCallWithOptionalParam = createServerResolver<Types.ParametersPostCallWithOptionalParamInput, Types.ParametersPostCallWithOptionalParamOutput>({
    route: '/api/v{api-version}/parameters/',
    method: 'POST',
    mediaType: 'application/json',
});

/**
 */
export const serverPostApiRequestBody = createServerResolver<Types.RequestBodyPostApiRequestBodyInput, Types.RequestBodyPostApiRequestBodyOutput>({
    route: '/api/v{api-version}/requestBody/',
    method: 'POST',
    mediaType: 'application/json',
});

/**
 */
export const serverPostApiFormData = createServerResolver<Types.FormDataPostApiFormDataInput, Types.FormDataPostApiFormDataOutput>({
    route: '/api/v{api-version}/formData/',
    method: 'POST',
    mediaType: 'multipart/form-data',
});

/**
 */
export const serverCallWithDefaultParameters = createServerResolver<Types.DefaultsCallWithDefaultParametersInput, Types.DefaultsCallWithDefaultParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'GET',
});

/**
 */
export const serverCallWithDefaultOptionalParameters = createServerResolver<Types.DefaultsCallWithDefaultOptionalParametersInput, Types.DefaultsCallWithDefaultOptionalParametersOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'POST',
});

/**
 */
export const serverCallToTestOrderOfParams = createServerResolver<Types.DefaultsCallToTestOrderOfParamsInput, Types.DefaultsCallToTestOrderOfParamsOutput>({
    route: '/api/v{api-version}/defaults',
    method: 'PUT',
});

/**
 */
export const serverDuplicateName = createServerResolver<Types.DuplicateDuplicateNameInput, Types.DuplicateDuplicateNameOutput>({
    route: '/api/v{api-version}/duplicate',
    method: 'GET',
});

/**
 */
export const serverDuplicateName1 = createServerResolver<Types.DuplicateDuplicateName1Input, Types.DuplicateDuplicateName1Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'POST',
});

/**
 */
export const serverDuplicateName2 = createServerResolver<Types.DuplicateDuplicateName2Input, Types.DuplicateDuplicateName2Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'PUT',
});

/**
 */
export const serverDuplicateName3 = createServerResolver<Types.DuplicateDuplicateName3Input, Types.DuplicateDuplicateName3Output>({
    route: '/api/v{api-version}/duplicate',
    method: 'DELETE',
});

/**
 * @returns void
 */
export const serverCallWithNoContentResponse = createServerResolver<Types.NoContentCallWithNoContentResponseInput, Types.NoContentCallWithNoContentResponseOutput>({
    route: '/api/v{api-version}/no-content',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyAMultipleTags1 = createServerResolver<Types.MultipleTags1DummyAInput, Types.MultipleTags1DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyBMultipleTags1 = createServerResolver<Types.MultipleTags1DummyBInput, Types.MultipleTags1DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyAMultipleTags2 = createServerResolver<Types.MultipleTags2DummyAInput, Types.MultipleTags2DummyAOutput>({
    route: '/api/v{api-version}/multiple-tags/a',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyBMultipleTags2 = createServerResolver<Types.MultipleTags2DummyBInput, Types.MultipleTags2DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns void
 */
export const serverDummyBMultipleTags3 = createServerResolver<Types.MultipleTags3DummyBInput, Types.MultipleTags3DummyBOutput>({
    route: '/api/v{api-version}/multiple-tags/b',
    method: 'GET',
});

/**
 * @returns ModelWithString
 */
export const serverCallWithResponse = createServerResolver<Types.ResponseCallWithResponseInput, Types.ResponseCallWithResponseOutput>({
    route: '/api/v{api-version}/response',
    method: 'GET',
});

/**
 * @returns ModelWithString Message for default response
 */
export const serverCallWithDuplicateResponses = createServerResolver<Types.ResponseCallWithDuplicateResponsesInput, Types.ResponseCallWithDuplicateResponsesOutput>({
    route: '/api/v{api-version}/response',
    method: 'POST',
});

/**
 * @returns any Message for 200 response
 * @returns ModelWithString Message for default response
 * @returns ModelThatExtends Message for 201 response
 * @returns ModelThatExtendsExtends Message for 202 response
 */
export const serverCallWithResponses = createServerResolver<Types.ResponseCallWithResponsesInput, Types.ResponseCallWithResponsesOutput>({
    route: '/api/v{api-version}/response',
    method: 'PUT',
});

/**
 */
export const serverCollectionFormat = createServerResolver<Types.CollectionFormatCollectionFormatInput, Types.CollectionFormatCollectionFormatOutput>({
    route: '/api/v{api-version}/collectionFormat',
    method: 'GET',
});

/**
 * @returns number Response is a simple number
 * @returns string Response is a simple string
 * @returns boolean Response is a simple boolean
 * @returns any Response is a simple object
 */
export const serverTypes = createServerResolver<Types.TypesTypesInput, Types.TypesTypesOutput>({
    route: '/api/v{api-version}/types',
    method: 'GET',
});

/**
 * @returns boolean
 */
export const serverUploadFile = createServerResolver<Types.UploadUploadFileInput, Types.UploadUploadFileOutput>({
    route: '/api/v{api-version}/upload',
    method: 'POST',
});

/**
 * @returns ModelWithString Successful response
 */
export const serverComplexTypes = createServerResolver<Types.ComplexComplexTypesInput, Types.ComplexComplexTypesOutput>({
    route: '/api/v{api-version}/complex',
    method: 'GET',
});

/**
 * @returns ModelWithString Success
 */
export const serverComplexParams = createServerResolver<Types.ComplexComplexParamsInput, Types.ComplexComplexParamsOutput>({
    route: '/api/v{api-version}/complex/{id}',
    method: 'PUT',
    mediaType: 'application/json-patch+json',
});

/**
 */
export const serverMultipartRequest = createServerResolver<Types.MultipartMultipartRequestInput, Types.MultipartMultipartRequestOutput>({
    route: '/api/v{api-version}/multipart',
    method: 'POST',
    mediaType: 'multipart/form-data',
});

/**
 * @returns any OK
 */
export const serverMultipartResponse = createServerResolver<Types.MultipartMultipartResponseInput, Types.MultipartMultipartResponseOutput>({
    route: '/api/v{api-version}/multipart',
    method: 'GET',
});

/**
 * @returns string Successful response
 */
export const serverCallWithResultFromHeader = createServerResolver<Types.HeaderCallWithResultFromHeaderInput, Types.HeaderCallWithResultFromHeaderOutput>({
    route: '/api/v{api-version}/header',
    method: 'POST',
});

/**
 * @returns any Custom message: Successful response
 */
export const serverTestErrorCode = createServerResolver<Types.ErrorTestErrorCodeInput, Types.ErrorTestErrorCodeOutput>({
    route: '/api/v{api-version}/error',
    method: 'POST',
});


"
`;
